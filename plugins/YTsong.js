const { cmd } = require("../command");
const yts = require("yt-search");
const { ytmp3 } = require("@kelvdra/scraper");
const axios = require("axios");
const fs = require("fs");
const path = require("path");
const { finished } = require("stream/promises");
const progress = require("progress-stream");

const MAX_AUDIO_SIZE = 16 * 1024 * 1024; // 16MB

// üì• Download to temp file with progress
async function downloadWithProgress(url, tempPath, reply) {
  const response = await axios({
    method: "GET",
    url,
    responseType: "stream",
  });

  const total = parseInt(response.headers["content-length"]);
  const progressStream = progress({
    length: total,
    time: 1000, // update every second
  });

  progressStream.on("progress", (prog) => {
    reply(
      `üì• ‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏: ${prog.percentage.toFixed(2)}% | ‚åõ ${Math.round(prog.runtime)}s | üì¶ ${(prog.transferred / (1024 * 1024)).toFixed(2)}MB`
    );
  });

  const writer = fs.createWriteStream(tempPath);
  response.data.pipe(progressStream).pipe(writer);
  await finished(writer);
}

// üì§ Send voice note
async function sendAudio(robin, from, mek, buffer, title) {
  await robin.sendMessage(
    from,
    {
      audio: buffer,
      mimetype: "audio/mpeg",
      ptt: true,
      fileName: `${title.slice(0, 30)}.mp3`,
    },
    { quoted: mek }
  );
}

// üì§ Send as document
async function sendDocument(robin, from, mek, buffer, title) {
  await robin.sendMessage(
    from,
    {
      document: buffer,
      mimetype: "audio/mpeg",
      fileName: `${title.slice(0, 30)}.mp3`,
      caption: "‚úÖ ùêÉùê®ùêúùêÆùê¶ùêûùêßùê≠ ùêíùêûùêßùê≠ ùêõùê≤ *SENAL MD* üî•",
    },
    { quoted: mek }
  );
}

// üîç Normalize YouTube input
function normalizeYouTubeInput(text) {
  const ytRegex = /(https?:\/\/)?(www\.)?(youtube\.com|youtu\.be)\/\S+/;
  return ytRegex.test(text) ? text : null;
}

// ‚ñ∂Ô∏è .play command
cmd(
  {
    pattern: "play",
    desc: "üéß YouTube Audio Downloader",
    category: "download",
    react: "üéß",
  },
  async (robin, mek, m, { from, q, reply }) => {
    try {
      if (!q) return reply("üîç *‡∂ö‡∂ª‡∑î‡∂´‡∑è‡∂ö‡∂ª ‡∂ú‡∑ì‡∂≠ ‡∂±‡∂∏‡∂ö‡∑ä ‡∑Ñ‡∑ù YouTube ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ω‡∂∂‡∑è ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.*");

      await reply("üîé _‡∑É‡∑ú‡∂∫‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì..._");

      let url = normalizeYouTubeInput(q);
      let video;

      if (url) {
        url = url.trim().replace(/[\[\]\(\)'"]/g, "");
        let videoId;
        try {
          videoId = new URL(url).searchParams.get("v");
        } catch {
          return reply("‚ùå *‡∑Ä‡∑ê‡∂ª‡∂Ø‡∑í YouTube ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ê‡∂∏‡∑ñ‡∑Ä‡∑ö‡∂∫.*");
        }
        const search = await yts({ videoId });
        video = search?.videos?.[0];
      } else {
        const search = await yts(q);
        video = search.videos[0];
        url = video?.url;
      }

      if (!video || !url) return reply("‚ùå *‡∂ú‡∑ì‡∂≠‡∂∫ ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑ì‡∂∫.*");

      const title = video.title;

      // Send song details
      const info = `
üéµ ‚îÄ‚îÄ‚ú® *SENAL MD* ‚ú®‚îÄ‚îÄ

üé∂ *Title:* ${title}
‚è±Ô∏è *Duration:* ${video.timestamp}
üëÅÔ∏è *Views:* ${video.views.toLocaleString()}
üìÖ *Uploaded:* ${video.ago}
üíæ *Size:* _‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∑ô‡∂±‡∑ä ‡∂¥‡∑É‡∑î_

üîó *Link:* ${url}
‚è¨ _‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂∫‡∑í..._
`.trim();

      await robin.sendMessage(
        from,
        { image: { url: video.thumbnail }, caption: info },
        { quoted: mek }
      );

      const result = await ytmp3(url, "mp3");
      if (!result?.download?.url) return reply("‚ùå *‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í.*");

      const tempPath = path.join(__dirname, "../temp", `senalmd_${Date.now()}.mp3`);
      await downloadWithProgress(result.download.url, tempPath, reply);

      const buffer = fs.readFileSync(tempPath);
      const fileSize = buffer.length;
      const fileSizeMB = (fileSize / (1024 * 1024)).toFixed(2);

      await reply(`üì§ _(${fileSizeMB}MB) ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏‡∂ß ‡∑É‡∑ñ‡∂Ø‡∑è‡∂±‡∂∏‡∑ä..._`);

      if (fileSize <= MAX_AUDIO_SIZE) {
        await sendAudio(robin, from, mek, buffer, title);
        await reply("‚úÖ *üéß Voice Note ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑î‡∂´‡∑í!*");
      } else {
        await sendDocument(robin, from, mek, buffer, title);
        await reply("‚úÖ *üìÑ Document ‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑î‡∂´‡∑í!*");
      }

      fs.unlinkSync(tempPath); // üßº Delete temp file

    } catch (e) {
      console.error("Play Command Error:", e);
      await reply("‚ùå *‡∂∂‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏ ‡∂Ö‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∂∫‡∑í. SENAL MD ‡∑Ñ‡∂ª‡∑Ñ‡∑è ‡∂±‡∑ê‡∑Ä‡∂≠ ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*");
    }
  }
);
