const { cmd } = require("../command");
const yts = require("yt-search");
const { ytmp3 } = require("@vreden/youtube_scraper");
const axios = require("axios");

cmd(
  {
    pattern: "song",
    react: "üéµ",
    desc: "Download Song from YouTube",
    category: "download",
    filename: __filename,
  },
  async (robin, mek, m, { from, q, quoted, reply }) => {
    try {
      if (!q) return reply("üéß *‡∑É‡∑í‡∂±‡∑ä‡∂Ø‡∑î‡∑Ä‡∑ö ‡∂±‡∂∏ ‡∑Ñ‡∑ù YouTube ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±.*");

      await reply("üîç ‡∑É‡∑ô‡∑Ä‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑î‡∂´‡∑è...");

      const search = await yts(q);
      const video = search.videos[0];

      if (!video || !video.videoId) {
        return reply("‚ùå *‡∑Ä‡∑ì‡∂©‡∑í‡∂∫‡∑ù‡∑Ä‡∂ö‡∑ä ‡∑Ñ‡∂∏‡∑î ‡∂±‡∑ú‡∑Ä‡∑î‡∂´‡∑è.*");
      }

      const videoUrl = `https://youtu.be/${video.videoId}`;
      await reply(`üì• Download link prepare ‡∂ö‡∂ª‡∂∏‡∑í‡∂±‡∑ä: ${videoUrl}`);

      const song = await ytmp3(videoUrl, "mp3");

      if (!song || !song.download || !song.download.url) {
        return reply("‚ùå *‡∑É‡∑í‡∂±‡∑ä‡∂Ø‡∑î‡∑Ä ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂±‡∑ú‡∑Ñ‡∑ê‡∂ö. ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂Ω‡∑í‡∂±‡∑ä‡∂ö‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ã‡∂≠‡∑ä‡∑É‡∑è‡∑Ñ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±.*");
      }

      await reply("‚¨áÔ∏è *‡∂∂‡∑è‡∂ú‡∂≠ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä...*");

      const res = await axios.get(song.download.url, { responseType: "arraybuffer" });
      const audioBuffer = Buffer.from(res.data);
      const fileSizeMB = (audioBuffer.length / (1024 * 1024)).toFixed(2);

      const caption = `
üé∂ *Title:* ${video.title}
‚è±Ô∏è *Duration:* ${video.timestamp}
üëÅÔ∏è *Views:* ${video.views}
üîó *Link:* ${videoUrl}
üì¶ *Size:* ${fileSizeMB} MB

_üî• Generated by MR SENAL_
`.trim();

      // Send video thumbnail + details
      await robin.sendMessage(
        from,
        {
          image: { url: video.thumbnail },
          caption,
        },
        { quoted: mek }
      );

      await reply("üì§ *‡∂Ö‡∂¥‡∑ä‡∂Ω‡∑ù‡∂©‡∑ä ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä...*");

      // Send audio as playable file
      await robin.sendMessage(
        from,
        {
          audio: audioBuffer,
          mimetype: "audio/mpeg",
          ptt: false,
          fileName: `${video.title}.mp3`,
        },
        { quoted: mek }
      );

      // Optionally send as document
      await robin.sendMessage(
        from,
        {
          document: audioBuffer,
          mimetype: "audio/mpeg",
          fileName: `${video.title}.mp3`,
          caption: "üì¶ *MP3 as Document*",
        },
        { quoted: mek }
      );

      await reply("‚úÖ *‡∑É‡∑è‡∂ª‡∑ä‡∂Æ‡∂ö‡∑Ä ‡∂Ö‡∑Ä‡∑É‡∂±‡∑ä! üéß*");

    } catch (e) {
      console.error("‚ùå Error in .song:", e);
      return reply(`‚ùå *‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä:* ${e.message}`);
    }
  }
);
