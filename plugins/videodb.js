const { cmd } = require("../command"); const yts = require("yt-search"); const { ytmp4 } = require("@kelvdra/scraper"); const axios = require("axios"); const uploadToGofile = require("../lib/upload");

const MAX_VIDEO_SIZE = 100 * 1024 * 1024; const sessions = {};

async function downloadFile(url) { const res = await axios.get(url, { responseType: "arraybuffer" }); return Buffer.from(res.data); }

async function sendVideo(robin, from, mek, buffer, title) { await robin.sendMessage( from, { video: buffer, mimetype: "video/mp4", fileName: ${title.slice(0, 30)}.mp4, caption: 🎬 *${title}* }, { quoted: mek } ); }

async function sendDocument(robin, from, mek, buffer, title) { await robin.sendMessage( from, { document: buffer, mimetype: "video/mp4", fileName: ${title.slice(0, 30)}.mp4, caption: "✅ Document sent by SENAL MD 🎥" }, { quoted: mek } ); }

async function sendFromGofile(robin, from, mek, gofileUrl, title) { await robin.sendMessage( from, { document: { url: gofileUrl }, mimetype: "video/mp4", fileName: ${title.slice(0, 30)}.mp4, caption: "✅ Sent via Gofile stream" }, { quoted: mek } ); }

cmd( { pattern: "video", desc: "📥 YouTube Video Downloader", category: "download", react: "📹" }, async (robin, mek, m, { q, reply }) => { const from = mek.key.remoteJid; if (!q) return reply("🔍 කරුණාකර වීඩියෝ නමක් හෝ YouTube ලින්ක් එකක් ලබාදෙන්න"); try { await reply("🔎 Searching for your video..."); const searchResult = await yts(q); const video = searchResult.videos[0]; if (!video) return reply("❌ Video not found. Try again."); sessions[from] = { video, step: "choose_format" }; const info = ` 🎬 SENAL MD Video Downloader

🎞️ Title: ${video.title} ⏱️ Duration: ${video.timestamp} 👁️ Views: ${video.views.toLocaleString()} 📤 Uploaded: ${video.ago} 🔗 URL: ${video.url}

📁 Choose file type: 🔹 video1 - Send as Video 🔹 video2 - Send as Document

✍️ Reply with video1 or video2 `; await robin.sendMessage( from, { image: { url: video.thumbnail }, caption: info }, { quoted: mek } ); } catch (err) { console.error("YT Video Error:", err); return reply("❌ Error while searching video. Try again later."); } } );

cmd( { pattern: "video1", desc: "Send YouTube video inline", dontAddCommandList: true }, async (robin, mek, m, { reply }) => { const from = mek.key.remoteJid; const session = sessions[from]; if (!session || session.step !== "choose_format") return; session.step = "sending"; try { await reply("⏬ Fetching video download link..."); const result = await ytmp4(session.video.url, "360"); if (!result?.url) return reply("❌ Couldn't get video download URL."); const buffer = await downloadFile(result.url); const filesize = buffer.length; const sizeMB = (filesize / 1024 / 1024).toFixed(2); await reply(📦 *File size:* ${sizeMB} MB); if (filesize > MAX_VIDEO_SIZE) { await reply("📤 File too large. Uploading to Gofile..."); const upload = await uploadToGofile(buffer, ${session.video.title.slice(0, 30)}.mp4); if (!upload.success) { console.error("Gofile upload failed:", upload.error); return reply("❌ Failed to upload to Gofile."); } await reply("📨 Streaming from Gofile to WhatsApp..."); await sendFromGofile(robin, from, mek, upload.directUrl, session.video.title); } else { await reply("📤 Uploading inline video..."); await sendVideo(robin, from, mek, buffer, session.video.title); } await reply("✅ Video sent successfully! ✅"); } catch (err) { console.error("Video1 send error:", err); await reply("❌ Failed to send video."); } delete sessions[from]; } );

cmd( { pattern: "video2", desc: "Send YouTube video as document", dontAddCommandList: true }, async (robin, mek, m, { reply }) => { const from = mek.key.remoteJid; const session = sessions[from]; if (!session || session.step !== "choose_format") return; session.step = "sending"; try { await reply("⏬ Fetching video download link..."); const result = await ytmp4(session.video.url, "360"); if (!result?.url) return reply("❌ Couldn't get video download URL."); const buffer = await downloadFile(result.url); const filesize = buffer.length; const sizeMB = (filesize / 1024 / 1024).toFixed(2); await reply(📦 *File size:* ${sizeMB} MB); if (filesize > MAX_VIDEO_SIZE) { await reply("☁️ File too large. Uploading to Gofile..."); const upload = await uploadToGofile(buffer, ${session.video.title.slice(0, 30)}.mp4); if (!upload.success) { console.error("Gofile upload failed:", upload.error); return reply("❌ Failed to upload to Gofile."); } await reply("📨 Streaming from Gofile to WhatsApp..."); await sendFromGofile(robin, from, mek, upload.directUrl, session.video.title); } else { await reply("📤 Uploading document to WhatsApp..."); await sendDocument(robin, from, mek, buffer, session.video.title); } await reply("✅ Document sent successfully! ✅"); } catch (err) { console.error("Video2 send error:", err); await reply("❌ Failed to send document."); } delete sessions[from]; } );

