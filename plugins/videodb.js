const { cmd } = require("../command");
const yts = require("yt-search");
const { ytmp4 } = require("@kelvdra/scraper");
const axios = require("axios");

const MAX_INLINE_SIZE = 50 * 1024 * 1024; // 50 MB
const MAX_DOCUMENT_SIZE = 2 * 1024 * 1024 * 1024; // 2 GB

function formatSize(bytes) {
  const units = ["B", "KB", "MB", "GB"];
  const i = Math.floor(Math.log(bytes) / Math.log(1024));
  return (bytes / Math.pow(1024, i)).toFixed(2) + " " + units[i];
}

function botMessage({ statusEmoji, statusText, fileName, fileSize, source, actionText, link }) {
  return `
🔰 *Senal-MD Bot* 🔰

⏳ *Status:* ${statusEmoji} ${statusText}
📁 *File Name:* ${fileName}
📦 *Size:* ${fileSize}
🌐 *Source:* ${source}

🛠️ *Action:* ${actionText}

${link ? `📥 *Download Link:* ${link}\n` : ""}
━━━━━━━━━━━━━━━
🌀 *Generated by Mr Senal*
`.trim();
}

cmd({
  pattern: "video",
  desc: "Download YouTube video (max 2GB)",
  category: "media",
  use: ".video <search or link>",
}, async (m, sock) => {
  const query = m.text.trim();
  const reply = (msg) => sock.sendMessage(m.chat, { text: msg }, { quoted: m });

  if (!query) return reply("❌ *Please provide a YouTube link or search term.*");

  try {
    const search = await yts(query);
    const video = search.videos[0];
    if (!video) return reply("❌ *Video not found.*");

    const { title, timestamp, url } = video;
    const res = await ytmp4(url);

    const fileSizeBytes = res.size;
    const fileName = res.title || title || "video.mp4";
    const fileSize = formatSize(fileSizeBytes);

    if (!res || !res.url) {
      throw new Error("Video download link not found.");
    }

    const downloadLink = res.url;

    if (fileSizeBytes > MAX_DOCUMENT_SIZE) {
      throw new Error("Video too large. Must be under 2GB.");
    }

    const response = await axios({
      method: "get",
      url: downloadLink,
      responseType: "stream",
    });

    await sock.sendMessage(
      m.chat,
      {
        document: response.data,
        mimetype: "video/mp4",
        fileName: fileName,
        caption: botMessage({
          statusEmoji: "✅",
          statusText: "Video processed successfully",
          fileName,
          fileSize,
          source: "YouTube",
          actionText: "Streaming to WhatsApp",
          link: null,
        }),
      },
      { quoted: m }
    );
  } catch (err) {
    console.error("Video Download Error:", err);
    await reply(botMessage({
      statusEmoji: "❌",
      statusText: `Failed to process video`,
      fileName: "-",
      fileSize: "-",
      source: "YouTube",
      actionText: "Please try again later.",
      link: null,
    }));
  }
});
