const axios = require("axios");
const { cmd } = require("../command");
const fs = require("fs");
const path = require("path");

cmd({
  pattern: "sub",
  react: "üé¨",
  desc: "Search and download Sinhala Subtitles from Zoom.lk",
  category: "download",
  use: ".sub <movie name>",
  filename: __filename
}, async (conn, mek, m, { args, reply }) => {
  try {
    const query = args.join(" ");
    if (!query) return reply("*‚ö°Type Your Movie Name For Get Subtitle.*\nExample: *.sub Avengers*");

    const searchUrl = `https://supun-md-api-xmjh.vercel.app/api/zoom-search?q=${encodeURIComponent(query)}`;
    const { data } = await axios.get(searchUrl);

    if (!data.results || data.results.length === 0) {
      return reply("> ‚ùå Movie Not Found On Zoom..!");
    }

    let txt = `üé¨ *Ôº´…™…¥Ôºß Ôº≥·¥Ä…¥·¥Ö·¥áÍú±Ôº® Ôº≠Ôº§ Ôº∫·¥è·¥èÔº≠ Ôº≥·¥ú ô·¥õ…™·¥õ üÔº• Ôº§·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö·¥áÔº≤* üé¨\n\n`;
    data.results.forEach((res, i) => {
      txt += `*${i+1}.* ${res.title}\nüë§ ${res.author}\nüí¨ ùô≤ùôæùôºùôºùô¥ùôΩùöÉùöÇ: ${res.comments}\nüîó ùôªùô∏ùôΩùô∫: ${res.link}\n\n> *¬© Powered By King-Sandesh Md V2 üí∏*\n\n`;
    });
    txt += `\n‚û°Ô∏è Use: *.subdl <movie link>* to download`;

    await reply(txt);

  } catch (e) {
    console.log(e);
    reply("‚ùå Error occurred while searching movie.");
  }
});

cmd({
  pattern: "subdl",
  react: "‚¨áÔ∏è",
  desc: "Download Sinhala Subtitle Movies from Zoom.lk",
  category: "download",
  use: ".subdl <zoom.lk movie link>",
  filename: __filename
}, async (conn, mek, m, { args, reply }) => {
  try {
    const url = args[0];
    if (!url) return reply("*‚ö°Please Copy And Paste Your Zoom Subtitle Link Show Abow.*\nExample: *.subdl https://zoom.lk/...*");

    const dlUrl = `https://supun-md-api-xmjh.vercel.app/api/zoom-dl?url=${encodeURIComponent(url)}`;
    const { data } = await axios.get(dlUrl);

    if (!data.results || !data.results.dl_link) {
      return reply("‚ùå Download link not found!");
    }

    let cap = `üé¨ *${data.results.title}*\n\n`;
    cap += `üìÖ ùô≥ùô∞ùöÉùô¥: ${data.results.date}\n`;
    cap += `üëÅÔ∏è ùöÖùô∏ùô¥ùöÜùöÇ: ${data.results.view}\n`;
    cap += `üíæ ùöÇùô∏ùöâùô¥: ${data.results.size}\n\n> *¬© Powered By King-Sandesh Md V2 üí∏*`;

    // File name & extension detect
    let dlLink = data.results.dl_link;
    let ext = path.extname(dlLink).toLowerCase();
    let filename = `${data.results.title || "movie"}${ext}`;
    let filePath = path.join(__dirname, "../tmp", filename);

    // Download file
    const response = await axios.get(dlLink, { responseType: "arraybuffer" });
    fs.writeFileSync(filePath, response.data);

    // Decide send type
    if (ext === ".mp4" || ext === ".mkv" || ext === ".avi") {
      // send as video document
      await conn.sendMessage(mek.chat, {
        document: fs.readFileSync(filePath),
        mimetype: "video/mp4",
        fileName: filename,
        caption: cap
      }, { quoted: mek });
    } else {
      // send as normal document
      await conn.sendMessage(mek.chat, {
        document: fs.readFileSync(filePath),
        mimetype: "application/octet-stream",
        fileName: filename,
        caption: cap
      }, { quoted: mek });
    }

    fs.unlinkSync(filePath);

  } catch (e) {
    console.log(e);
    reply("‚ùå Error occurred while fetching or sending download.");
  }
});
